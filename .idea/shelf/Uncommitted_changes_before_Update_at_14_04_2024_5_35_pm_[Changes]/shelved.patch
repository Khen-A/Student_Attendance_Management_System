Index: Student_Attendance.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Student Attendance Management System\r\n# Created by: Khen Jomarie L. Alcantara\r\n# Degree: BS Electronics And Communication Engineering\r\n# Level: 1st Year\r\n\r\n# Import library\r\nimport sqlite3\r\nimport datetime\r\nimport msvcrt\r\nimport ctypes.wintypes\r\nimport os\r\nimport sys\r\nimport re\r\n\r\n\r\n# Initialize variable\r\nstudent_details = []\r\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\r\ndays_of_week = \"\"\r\nschedule = []\r\nnew_schedule = []\r\ncurrent_str = \"\"\r\ndata = \"\"\r\ncolumns = int\r\nin_register_new_student = False\r\nin_update_student_details = False\r\nregistering_new_student = False\r\nupdating_student_details = False\r\nupdating_class_schedule = False\r\n\r\n\r\n# Class Text Style and Color\r\nclass Text:\r\n    NONE = \"\\033[0m\"\r\n\r\n    class Color:\r\n        class Foreground:\r\n            Black = \"\\033[30m\"\r\n            Red = \"\\033[31m\"\r\n            Green = \"\\033[32m\"\r\n            Yellow = \"\\033[33m\"\r\n            Blue = \"\\033[34m\"\r\n            Magenta = \"\\033[35m\"\r\n            Cyan = \"\\033[36m\"\r\n            Light_Gray = \"\\033[37m\"\r\n            Dark_Gray = \"\\033[90m\"\r\n            Light_Red = \"\\033[91m\"\r\n            Light_Green = \"\\033[92m\"\r\n            Light_Yellow = \"\\033[93m\"\r\n            Light_Blue = \"\\033[94m\"\r\n            Light_Magenta = \"\\033[95m\"\r\n            Light_Cyan = \"\\033[96m\"\r\n            White = \"\\033[97m\"\r\n\r\n        class Background:\r\n            Black = \"\\033[40m\"\r\n            Red = \"\\033[41m\"\r\n            Green = \"\\033[42m\"\r\n            Yellow = \"\\033[43m\"\r\n            Blue = \"\\033[44m\"\r\n            Magenta = \"\\033[45m\"\r\n            Cyan = \"\\033[46m\"\r\n            Light_Gray = \"\\033[47m\"\r\n            Dark_Gray = \"\\033[100m\"\r\n            Light_Red = \"\\033[101m\"\r\n            Light_Green = \"\\033[102m\"\r\n            Light_Yellow = \"\\033[103m\"\r\n            Light_Blue = \"\\033[104m\"\r\n            Light_Magenta = \"\\033[105m\"\r\n            Light_Cyan = \"\\033[106m\"\r\n            White = \"\\033[107m\"\r\n\r\n    class Style:\r\n        Bold = \"\\033[1m\"\r\n        Underline = \"\\033[4m\"\r\n        No_Underline = \"\\033[24m\"\r\n        Reverse = \"\\033[7m\"\r\n        Not_Reverse = \"\\033[27m\"\r\n\r\n\r\n# Setting up connection with SAData.db file\r\nconnection = sqlite3.connect('SAData.db')\r\n\r\n# Assigning cursor for executing sqlite3 inquiries\r\ncursor = connection.cursor()\r\n\r\n# Creating Student_info table and column if not exist\r\ncursor.execute(\"CREATE TABLE IF NOT EXISTS Student_Info (\"\r\n               \"Student_No   TEXT UNIQUE PRIMARY KEY, \"\r\n               \"_Name        TEXT, \"\r\n               \"_Department  TEXT, \"\r\n               \"_Degree      TEXT, \"\r\n               \"_Level       TEXT, \"\r\n               \"_Signature   TEXT)\")\r\n\r\n# Creating Class_Schedule table and column\r\ncursor.execute(\"CREATE TABLE IF NOT EXISTS Class_Schedule (\"\r\n               \"Student_No   TEXT, \"\r\n               \"_Course      TEXT, \"\r\n               \"_Day         TEXT, \"\r\n               \"_Time        TEXT)\")\r\n\r\n# Creating Attendance table and column\r\ncursor.execute(\"CREATE TABLE IF NOT EXISTS Attendance (\"\r\n               \"Student_No   TEXT, \"\r\n               \"_Course      TEXT, \"\r\n               \"_Day         TEXT, \"\r\n               \"_Time        TEXT, \"\r\n               \"_Date        TEXT, \"\r\n               \"_TimeIn      TEXT, \"\r\n               \"_Status      ANY)\")\r\n\r\n# Creating Login_Attempt table and column\r\ncursor.execute(\"CREATE TABLE IF NOT EXISTS Login_Attempt (\"\r\n               \"Student_No   TEXT, \"\r\n               \"_Time         TEXT, \"\r\n               \"_Count        TEXT)\")\r\n\r\n# Saving all inquiries\r\nconnection.commit()\r\n\r\n\r\n# Function for requesting administration\r\ndef run_as_administrator():\r\n    # Checking current console if not running as administrator\r\n    if not ctypes.windll.shell32.IsUserAnAdmin():\r\n        ctypes.windll.shell32.ShellExecuteW(None, \"runas\", sys.executable, os.path.basename(__file__), None, 1)\r\n        sys.exit()\r\n\r\n\r\n# Function for aligning console to center windows\r\ndef center_console_window():\r\n    # Get handle to the console window\r\n    console_handle = ctypes.windll.kernel32.GetConsoleWindow()\r\n    if console_handle != 0:\r\n        # Get screen dimensions\r\n        screen_width = ctypes.windll.user32.GetSystemMetrics(0)\r\n        screen_height = ctypes.windll.user32.GetSystemMetrics(1)\r\n\r\n        # Get dimensions of the console window\r\n        rect = ctypes.wintypes.RECT()\r\n        ctypes.windll.user32.GetWindowRect(console_handle, ctypes.byref(rect))\r\n        console_width = rect.right - rect.left\r\n        console_height = rect.bottom - rect.top\r\n\r\n        # Calculate new position\r\n        x = (screen_width - console_width) // 2\r\n        y = (screen_height - console_height) // 2\r\n\r\n        # Set console window position\r\n        ctypes.windll.user32.MoveWindow(console_handle, x, y, console_width, console_height, True)\r\n\r\n\r\n# Function for assigning console title\r\ndef set_console_title(title):\r\n    ctypes.windll.kernel32.SetConsoleTitleW(title)\r\n\r\n\r\n# Function for resizing console\r\ndef set_console_size(width: int, height: int):\r\n    os.system(f\"mode con cols={width} lines={height}\")\r\n\r\n\r\n# Function for not allowing user to resize and maximizing the console\r\ndef set_window_style():\r\n    # Define necessary constants\r\n    gwl_style = -16\r\n    ws_sizebox = 0x00040000\r\n    ws_maximizebox = 0x00010000\r\n\r\n    # Get handle to the console window\r\n    hwnd = ctypes.windll.kernel32.GetConsoleWindow()\r\n\r\n    # update the window style to remove the sizing border\r\n    if hwnd != 0:\r\n        style = ctypes.windll.user32.GetWindowLongW(hwnd, gwl_style)\r\n        style &= ~ws_sizebox\r\n        style &= ~ws_maximizebox\r\n        ctypes.windll.user32.SetWindowLongW(hwnd, gwl_style, style)\r\n\r\n\r\n# Function for clearing/deleting a line\r\ndef clear(line):\r\n    for _ in range(line):\r\n        print(\"\\x1b[1A\\x1b[2K\", end=\"\\r\")\r\n\r\n\r\n# Function for key-pressed\r\ndef input_key(__prompt):\r\n    print(__prompt, end='', flush=True)  # Print the prompt without a newline\r\n    while True:\r\n        try:\r\n            key = msvcrt.getch().decode()\r\n            if key:\r\n                print(\"\\n\", end='')\r\n                return key\r\n        except UnicodeDecodeError:\r\n            continue\r\n\r\n\r\n# Function for limiting user input\r\ndef limit_input(_prompt: str, _length: int):\r\n    # Current_str is the current input of the user. This will be used to update the class schedule and student details.\r\n    global current_str\r\n    print(_prompt, end='', flush=True)  # Print the prompt without a newline\r\n    input_str = current_str\r\n    print(input_str, end='', flush=True)\r\n    cursor_position = len(input_str)\r\n    while True:\r\n        if msvcrt.kbhit():\r\n            char = msvcrt.getch()  # Get a keypress\r\n            if char == b'\\r':  # Enter key pressed\r\n                if input_str:\r\n                    break\r\n            elif char == b'\\x08':  # Backspace key pressed\r\n                if len(input_str) == cursor_position > 0:  # For deleting within the maximum text length\r\n                    input_str = input_str[:cursor_position - 1] + input_str[cursor_position:]\r\n                    cursor_position -= 1\r\n                    print('\\b \\b', end='', flush=True)\r\n\r\n                if len(input_str) > cursor_position > 0:  # For deleting between text\r\n                    total_input_str = len(input_str)\r\n                    input_str = input_str[:cursor_position - 1] + input_str[cursor_position:]\r\n                    chars_to_reprint = len(input_str) - cursor_position\r\n                    print('\\033[C' * (chars_to_reprint + 1) + '\\b \\b' * total_input_str + input_str, end='', flush=True)\r\n                    print('\\033[D' * (chars_to_reprint + 2) + '\\033[C', end='', flush=True)\r\n                    cursor_position -= 1\r\n\r\n            elif char == b'\\xe0':  # Arrow key pressed (Allow user to move the cursor)\r\n                arrow = msvcrt.getch()  # Get the arrow character\r\n                if arrow == b'H':  # Up arrow key\r\n                    pass\r\n                elif arrow == b'K':  # Left arrow key\r\n                    if cursor_position > 0:\r\n                        print('\\033[D', end='', flush=True)\r\n                        cursor_position -= 1\r\n                elif arrow == b'M':  # Right arrow key\r\n                    if len(input_str) > cursor_position >= 0:\r\n                        print('\\033[C', end='', flush=True)\r\n                        cursor_position += 1\r\n\r\n            elif char == b' ':  # Space key pressed\r\n                if len(input_str) < _length:\r\n                    input_str = input_str[:cursor_position] + ' ' + input_str[cursor_position:]\r\n                    chars_to_reprint = len(input_str) - cursor_position\r\n                    remaining_text = input_str[cursor_position:]\r\n                    print(remaining_text, end='', flush=True)\r\n                    print('\\033[D' * (chars_to_reprint - 1), end='', flush=True)\r\n                    cursor_position += 1\r\n\r\n            elif char == b'\\t':  # Disable tab key\r\n                pass\r\n\r\n            elif char == b'\\x00':  # Num-Lock is off\r\n                next_char = msvcrt.getch()\r\n                if next_char:\r\n                    pass\r\n\r\n            elif char.isalpha() or char.isalnum() or char.isascii():\r\n                if _length > len(input_str) > cursor_position:  # Allow user to input between text\r\n                    input_str = input_str[:cursor_position] + char.decode('utf-8') + input_str[cursor_position:]\r\n                    chars_to_reprint = len(input_str) - cursor_position\r\n                    remaining_text = input_str[cursor_position:]\r\n                    print(remaining_text, end='', flush=True)\r\n                    print('\\033[D' * (chars_to_reprint - 1), end='', flush=True)\r\n                    cursor_position += 1\r\n                elif cursor_position == len(input_str) < _length:\r\n                    input_str += char.decode('utf-8')\r\n                    print(input_str[-1], end='', flush=True)\r\n                    cursor_position += 1\r\n    return input_str\r\n\r\n\r\n# Function for allowing the user to input only integers and allowing them to decide what numbers should be pressed\r\ndef int_input(_prompt: str, _range: int):\r\n    print(_prompt, end='', flush=True)  # Print the prompt without a newline\r\n    input_str = \"\"\r\n    cursor_position = len(input_str)\r\n    while True:\r\n        if msvcrt.kbhit():\r\n            char = msvcrt.getch()  # Get a keypress\r\n            if char == b'\\r':  # Enter key pressed\r\n                if input_str:\r\n                    break\r\n\r\n            elif char == b'\\x08':  # Backspace key pressed\r\n                if len(input_str) == cursor_position > 0:\r\n                    input_str = input_str[:cursor_position - 1] + input_str[cursor_position:]\r\n                    cursor_position -= 1\r\n                    print('\\b \\b', end='', flush=True)\r\n\r\n            elif char == b'\\xe0':  # Disable arrow key\r\n                arrow = msvcrt.getch()\r\n                if arrow:\r\n                    pass\r\n\r\n            elif char == b' ' or char == b'\\t':  # Disable space and tab key\r\n                pass\r\n\r\n            elif char == b'\\x00':  # Num-Lock is off\r\n                next_char = msvcrt.getch()\r\n                if next_char:\r\n                    pass\r\n\r\n            elif char.isalpha() or char.isascii() and not char.isalnum():  # Disable all letters and symbols\r\n                pass\r\n\r\n            elif char.isalnum():  # Numbers key\r\n                if char.decode('utf-8') in input_str:\r\n                    pass\r\n                else:\r\n                    if char.decode('utf-8') in map(str, range(1, _range + 1)):\r\n                        input_str += char.decode('utf-8')  # Decode bytes to string\r\n                        print(input_str[-1], end='', flush=True)  # Print the character\r\n                        cursor_position += 1\r\n    return input_str\r\n\r\n\r\n# Function tab header and title\r\ndef tab_title(title):\r\n    current_date = datetime.datetime.now().date().strftime(\"%B %d, %Y | %A\")  # Get the current date\r\n    current_time = datetime.datetime.now().time().strftime(\"%I:%M %p\")  # Get the current time\r\n\r\n    # Display tab header and title\r\n    print(Text.Color.Foreground.Green, end=\"\")\r\n    print((\"╔\" + \"═\" * int(columns - 2) + \"╗\").center(columns))\r\n    print((\"║\" + Text.Color.Foreground.Yellow + Text.Style.Bold + f\"{title:^{columns-2}}\" +\r\n           Text.NONE + Text.Color.Foreground.Green + \"║\").center(columns + 10))\r\n    print((\"║\" + Text.Color.Foreground.Light_Cyan + f\"{current_date + \" \" * int(columns - 40) + \r\n                                                       current_time:^{columns - 2}}\"\r\n           + Text.Color.Foreground.Green + \"║\").center(columns + 10))\r\n    print(Text.Color.Foreground.Green, end=\"\")\r\n    print((\"╚\" + \"═\" * int(columns - 2) + \"╝\").center(columns))\r\n    print(Text.NONE, end=\"\")\r\n\r\n\r\n# Function for queuing new student details\r\ndef add_student(_student):\r\n    cursor.execute(\"INSERT INTO Student_Info VALUES (?, ?, ?, ?, ?, ?)\", _student)\r\n\r\n\r\n# Function for queuing new class schedule\r\ndef add_schedule(_schedule):\r\n    cursor.executemany(\"INSERT INTO Class_Schedule VALUES (?, ?, ?, ?)\", _schedule)\r\n\r\n\r\n# Function for queuing update student details\r\ndef update_student(_student):\r\n    cursor.execute(\"UPDATE Student_Info SET _Name = ?, _Department = ?, _Degree = ?, _Level = ?, _Signature = ? \"\r\n                   \"WHERE Student_No = ?\", _student[1:] + [_student[0]])\r\n\r\n\r\n# Function for queuing attendance\r\ndef attendance(_attendance):\r\n    cursor.executemany(\"INSERT INTO Attendance VALUES (?, ?, ?, ?, ?, ?, ?)\", _attendance)\r\n\r\n\r\ndef login_attempt(_student):\r\n    cursor.executemany(\"INSERT INTO Login_Attempt VALUES (?, ?, ?)\", _student)\r\n\r\n\r\n# Function for getting student details\r\ndef student(__usage):\r\n    global student_details\r\n    global in_register_new_student\r\n    global in_update_student_details\r\n    student_details.clear()\r\n\r\n    # Login display design\r\n    print(\"\\n\" * 9)\r\n    print(\"╭─────────────────────────────────────────────╮\".center(columns))\r\n    print(f\"│{\"STUDENT\":^45}│\".center(columns))\r\n    print(\"├─────────────────────────────────────────────┤\".center(columns))\r\n    print(\"│                                             │\".center(columns))\r\n    print(\"│                                             │\".center(columns))\r\n    print(\"│                                             │\".center(columns))\r\n    print(\"│                                             │\".center(columns))\r\n    print(\"│                                             │\".center(columns))\r\n    print(\"╰─────────────────────────────────────────────╯\".center(columns))\r\n\r\n    print(\"\\033[4F\", end=\"\")\r\n    if __usage == \"Update Schedule\" or __usage == \"Update Student Details\":\r\n        print(\"\\033[1E\", end=\"\")\r\n        print(f\"│    {\"Signature   :\":<41}│\".center(columns))\r\n        print(\"\\033[3F\", end=\"\")\r\n\r\n    while True:  # Validate student_no input\r\n        stud_no = str(limit_input(f\"{\"\":<21}│    Student No. : \", 8))\r\n        if stud_no:\r\n            if __usage == \"Update Schedule\" or __usage == \"Update Student Details\":\r\n                print(\"\\033[1F\", end=\"\")\r\n            else:\r\n                print(\"\\033[2F\", end=\"\")\r\n            break\r\n        else:\r\n            print(\"\\r\", end=\"\")\r\n            continue\r\n\r\n    cursor.execute(\"SELECT * FROM Student_Info WHERE Student_No = ?\", (stud_no,))  # Searching for student\r\n    _student = cursor.fetchall()  # Saving temporarily the search student details\r\n    if _student:  # Checking if student exist\r\n        student_details = [x for item in _student for x in item[0:6]]  # Saving student details as array\r\n        if not __usage == \"Update Schedule\" and not __usage == \"Update Student Details\":\r\n            print(\"\\033[10E\", end=\"\")\r\n            clear(100)\r\n            return\r\n    else:  # if student not exist\r\n        # Option display design\r\n        print(f\"│  {\"OPTION:\":<43}│\".center(columns))\r\n        print(f\"│    {\"[1] Home\":<41}│\".center(columns))\r\n        print(f\"│    {\"[2] Register New Student\":<41}│\".center(columns))\r\n        print(f\"│    {\"[3] Update Class Schedule\":<41}│\".center(columns))\r\n        print(f\"│    {\"[4] Update Student Details\":<41}│\".center(columns))\r\n        print(f\"│{\"\":<45}│\".center(columns))\r\n        print(f\"│{\"\":<45}│\".center(columns))\r\n        print(f\"│{\"\":<45}│\".center(columns))\r\n        print(f\"╰{\"─\" * 45}╯\".center(columns))\r\n        print(f\"MSG: Student currently not enrolled!!!\".center(columns))\r\n        print(\"\\033[3F\", end=\"\")\r\n\r\n        while True:  # Validate key_pressed\r\n            key_pressed = input_key(f\"{\"\":<21}│  Select: \")\r\n            match key_pressed:\r\n                case \"1\":\r\n                    print(\"\\033[3E\", end=\"\")\r\n                    clear(100)\r\n                    check_attendance()\r\n                case \"2\":\r\n                    print(\"\\033[3E\", end=\"\")\r\n                    clear(100)\r\n                    in_register_new_student = True\r\n                    register_new_student()\r\n                case \"3\":\r\n                    print(\"\\033[3E\", end=\"\")\r\n                    clear(100)\r\n                    update_schedule()\r\n                case \"4\":\r\n                    print(\"\\033[3E\", end=\"\")\r\n                    clear(100)\r\n                    in_update_student_details = True\r\n                    update_student_details()\r\n                case _:\r\n                    print(\"\\033[1F\", end=\"\")\r\n                    continue\r\n            break\r\n\r\n    print(\"\\033[3E\", end=\"\")\r\n\r\n    current_time = datetime.datetime.now().time().strftime(\"%I:%M:%S %p\")\r\n\r\n    cursor.execute(\"SELECT * FROM Login_Attempt WHERE Student_No = ?\", (student_details[0],))  # Searching for student\r\n    _attempt = [x for item in cursor.fetchall() for x in item[0:6]]  # Saving login attempts as array\r\n\r\n    try_count = 0\r\n\r\n    if not _attempt:  # If _attempt is empty or no record.\r\n        # adding _attempt log to login_attempt database\r\n        time = current_time\r\n        attempt_count = 3\r\n        _attempt = [(student_details[0], time, attempt_count)]\r\n        login_attempt(_attempt)\r\n        connection.commit()\r\n    else:  # _attempt already exist\r\n        time = _attempt[1]\r\n        attempt_count = _attempt[2]\r\n\r\n        # Converting time to 24 hrs and whole number\r\n        time = convert_to_24hrs(time)\r\n        current_time = convert_to_24hrs(current_time)\r\n\r\n        # Checking for time remaining for log in\r\n        time_remaining = current_time - time\r\n        if attempt_count != 0:  # If all attempts are not used. The user needs to retry after 60 seconds.\r\n            if (60 - time_remaining) > 0:\r\n                clear(100)\r\n                print(\"\\033[23E\", end=\"\")\r\n                print(f\"MSG: Please try again in {60 - time_remaining} seconds.\".center(columns))\r\n                print(\"\\033[f\", end=\"\")\r\n                check_attendance()\r\n        else:  # All attempts already used. The user needs to retry after 1 hour.\r\n            if (3600 - time_remaining) > 0:\r\n                clear(100)\r\n                print(\"\\033[23E\", end=\"\")\r\n                print(f\"MSG: Please try again in {round((3600 - time_remaining)/60, 2)} minutes.\"\r\n                      .center(columns))\r\n                print(\"\\033[f\", end=\"\")\r\n                check_attendance()\r\n\r\n    # Validating signature and try count\r\n    while try_count < 5:  # If try count is not greater than 5\r\n        print(f\"│{\"\":^45}│\".center(columns))\r\n        print(\"\\033[1F\", end=\"\")\r\n        key_signature = str(limit_input(f\"{\"\":<21}│    Signature   : \", 25))\r\n        if key_signature == student_details[5]:  # If signature is correct\r\n            cursor.execute(\"DELETE FROM Login_Attempt WHERE Student_No = ?\", (student_details[0],))\r\n            add_schedule(schedule)\r\n            connection.commit()\r\n            print(\"\\033[10E\", end=\"\")\r\n            clear(100)\r\n            return\r\n        else:  # Signature is wrong\r\n            print(\"\\033[3E\", end=\"\")\r\n            print(\"MSG: Wrong signature. Please try again. \".center(columns))\r\n            print(\"\\033[3F\", end=\"\")\r\n            try_count += 1\r\n            clear(1)\r\n            continue\r\n    else:  # It will return to check attendance and display message for attempts\r\n        current_time = datetime.datetime.now().time().strftime(\"%I:%M:%S %p\")\r\n        attempt_count -= 1\r\n        _attempt = [student_details[0], current_time, attempt_count]\r\n        cursor.execute(\"UPDATE Login_Attempt SET _Time = ?, _Count = ? WHERE Student_No = ?\",\r\n                       _attempt[1:] + [_attempt[0]])\r\n        connection.commit()\r\n        clear(100)\r\n        print(\"\\033[23E\", end=\"\")\r\n        if attempt_count == 0:\r\n            print(f\"MSG: All attempts used. Try again in 1 hour.\".center(columns))\r\n        elif attempt_count == 1:\r\n            print(f\"MSG: Wrong signature. There's only {attempt_count} more attempt to try.\".center(columns))\r\n            print(f\"{\"     Please try again in 60 seconds.\":<58}\".center(columns))\r\n        else:\r\n            print(f\"MSG: Wrong signature. There's only {attempt_count} more attempts to retry.\".center(columns))\r\n            print(f\"{\"     Please try again in 60 seconds.\":<60}\".center(columns))\r\n\r\n        print(\"\\033[f\", end=\"\")\r\n        check_attendance()\r\n\r\n\r\n# Function for displaying student details\r\ndef _details(_student):\r\n    # Checking if user not updating student details and not register new student\r\n    if updating_student_details or in_update_student_details or registering_new_student or in_register_new_student:\r\n        print((\"╭\" + \"─\" * 84 + \"╮\").center(columns))\r\n        print(f\"│{\"STUDENT DETAILS:\":^84}│\".center(columns))\r\n        print((\"├\" + \"─\" * 84 + \"┤\").center(columns))\r\n        print((\"│\" + \" \" * 84 + \"│\").center(columns))\r\n        print(f\"│  Student No.: {_student[0]:<69}│\".center(columns))\r\n        print(f\"│  Name       : {_student[1]:<69}│\".center(columns))\r\n        print(f\"│  Department : {_student[2]:<69}│\".center(columns))\r\n        print(f\"│  Degree     : {_student[3]:<69}│\".center(columns))\r\n        print(f\"│  Year Level : {_student[4]:<69}│\".center(columns))\r\n        print(f\"│  Signature  : {_student[5]:<69}│\".center(columns))\r\n        print((\"│\" + \" \" * 84 + \"│\").center(columns))\r\n        print((\"╰\" + \"─\" * 84 + \"╯\").center(columns))\r\n    else:\r\n        print(f\"┆  {Text.Style.Underline + \"Student Details:\" + Text.NONE:<92}┆\".center(columns + 8))\r\n        print(f\"┆{\"\":<86}┆\".center(columns))\r\n        print(f\"┆    Name        : {_student[1]:<68}┆\".center(columns))\r\n        print(f\"┆    Department  : {_student[2]:<68}┆\".center(columns))\r\n        print(f\"┆    Degree      : {_student[3]:<68}┆\".center(columns))\r\n        print(f\"┆    Level       : {_student[4]:<68}┆\".center(columns))\r\n        print(f\"┆{\"\":<86}┆\".center(columns))\r\n        print((f\"└\" + \"–\" * 86 + \"┘\").center(columns))\r\n\r\n\r\n# Function for checking attendance\r\ndef check_attendance():\r\n    attendance_log = []\r\n    next_schedule = []\r\n    status = \"PENDING\"\r\n    today_next_schedule_found = False\r\n    schedule.clear()\r\n\r\n    tab_title(\"CHECK ATTENDANCE\")\r\n\r\n    student(\"Check Attendance\")\r\n\r\n    tab_title(\"CHECK ATTENDANCE\")\r\n\r\n    stud_no = student_details[0]\r\n    stud_signature = student_details[5]\r\n\r\n    _details(student_details)\r\n\r\n    # Getting current date and time\r\n    current_date = datetime.datetime.now().date().strftime(\"%m/%d/%y\")\r\n    current_day = datetime.datetime.now().date().strftime(\"%A\")\r\n    current_time = datetime.datetime.now().time().strftime(\"%I:%M %p\")\r\n\r\n    if current_time.startswith(\"0\"):    # Removing the starting 0 in hour\r\n        current_time = current_time[1:]\r\n\r\n    # Searching for today class schedule in class schedule database\r\n    cursor.execute(\"SELECT * FROM Class_Schedule WHERE Student_No = ? AND _Day = ?\",\r\n                   (stud_no, current_day,))\r\n    schedule.extend(cursor.fetchall())  # Store all search class schedule\r\n\r\n    # Checking for current schedule\r\n    for index, (stud_no, course, day, time) in enumerate(schedule):\r\n        start_time, end_time = time.split(\" - \")\r\n\r\n        start_time = convert_to_24hrs(start_time)\r\n        end_time = convert_to_24hrs(end_time)\r\n        time_now = convert_to_24hrs(current_time)\r\n\r\n        # if the current time already skip the schedule time, the status will be marked as absent.\r\n        if end_time <= time_now:\r\n            # Searching for skip schedule\r\n            cursor.execute(\"SELECT * FROM Attendance WHERE Student_No = ? AND _Course = ? \"\r\n                           \"AND _Day = ? AND _Time = ? AND _Date = ?\",\r\n                           (stud_no, course, day, time, current_date))\r\n            attn_log = cursor.fetchall()  # Store the search schedule\r\n            if not attn_log:\r\n                # Store the schedule to attendance log\r\n                attendance_log.append((stud_no, course, day, time, current_date, \"N/A\", \"ABSENT\"))\r\n                attendance(attendance_log)\r\n                connection.commit()\r\n                attendance_log.clear()\r\n\r\n        if start_time <= time_now <= end_time:  # Searching for current schedule\r\n            _schedule = (stud_no, course, day, time, current_date, current_time)\r\n            # Store the current schedule to attendance log\r\n            attendance_log.append(_schedule)\r\n\r\n            # Checking for next schedule\r\n            if index + 1 < len(schedule):\r\n                _next = schedule[index + 1]\r\n                next_schedule.append(_next)\r\n                today_next_schedule_found = True\r\n            break\r\n\r\n    # Checking now for attendance\r\n    _attendance = []\r\n    for attn, (stud_no, course, day, time, current_date, current_time) in enumerate(attendance_log):\r\n        # Searching for current attendance in attendance\r\n        cursor.execute(\"SELECT * FROM Attendance WHERE Student_No = ? AND _Course = ? \"\r\n                       \"AND _Day = ? AND _Time = ? AND _Date = ?\",\r\n                       (stud_no, course, day, time, current_date))\r\n        _attendance = cursor.fetchall()  # Store all search schedule\r\n\r\n        # If it is not already signed, it will ask user to input their signature.\r\n        while not _attendance:\r\n            max_entry = 3  # Allow user to input only 3 attempts for their signature.\r\n            for attn_log in attendance_log:\r\n                print(\"┌─────────────────────────────────────────────┐\".center(columns))\r\n                print(f\"│{\"SCHEDULE NOW\":^45}│\".center(columns))\r\n                print(\"├─────────────────────────────────────────────┤\".center(columns))\r\n                print(f\"│ Course Title : {attn_log[1]:<29}│\".center(columns))\r\n                print(f\"│ Time         : {attn_log[3]:<29}│\".center(columns))\r\n                print(f\"│ Status       : {status:<29}│\".center(columns))\r\n                print(\"├─────────────────────────────────────────────┤\".center(columns))\r\n\r\n                # If user reach all attempts their attendance will be marked as absent\r\n                while max_entry > 0:\r\n                    print(\"│                                             │\".center(columns))\r\n                    print(\"└─────────────────────────────────────────────┘\".center(columns))\r\n                    print(\"\\033[2F\", end=\"\")\r\n                    key_signature = str(limit_input(f\"{\"\":<21}│ Signature: \", 25))\r\n                    if key_signature == \"\":\r\n                        print(\"\\r\")\r\n                    else:\r\n                        if key_signature == stud_signature:\r\n                            break\r\n                        else:\r\n                            print(\"\\033[3E\", end=\"\")\r\n                            if max_entry > 2:\r\n                                print(f\"{\"\":<21}MSG: Wrong signature. You have {max_entry - 1} attempt(s) left.\")\r\n                                print(\"\\033[2F\", end=\"\")\r\n                                clear(1)\r\n                                print(\"\\033[1F\", end=\"\")\r\n                            else:\r\n                                print(f\"{\"\":<21}MSG: Wrong signature. You have {max_entry - 1} attempt(s) left.\")\r\n                                print(f\"{\"\":<21}     Otherwise, You will be marked as ABSENT. \")\r\n                                print(\"\\033[3F\", end=\"\")\r\n                                clear(1)\r\n                                print(\"\\033[1F\", end=\"\")\r\n                            max_entry -= 1\r\n\r\n                # Preparing for queuing the attendance\r\n                attendance_log.clear()\r\n\r\n                # Splitting and converting time into real number\r\n                current_time = datetime.datetime.now().time().strftime(\"%I:%M %p\")\r\n                start_time, end_time = map(convert_to_24hrs, attn_log[3].split(\" - \"))\r\n                time_now = convert_to_24hrs(current_time)\r\n\r\n                # Condition for Present, Absent, and Late\r\n                if max_entry == 0:\r\n                    status = \"ABSENT\"\r\n                elif 5 <= (time_now - start_time) <= 15:\r\n                    status = \"LATE\"\r\n                elif (time_now - start_time) > 15:\r\n                    status = \"ABSENT\"\r\n                else:\r\n                    status = \"PRESENT\"\r\n\r\n                if current_time.startswith(\"0\"):    # Removing the starting 0 in hour\r\n                    current_time = current_time[1:]\r\n\r\n                # Storing for now in attendance_log variable as array\r\n                attendance_log = [(attn_log[0], attn_log[1], attn_log[2], attn_log[3],\r\n                                   attn_log[4], current_time, status)]\r\n\r\n                # Committing or saving the attendance to database\r\n                attendance(attendance_log)\r\n                connection.commit()\r\n\r\n                # Storing attendance log to _attendance variable for using it to display\r\n                _attendance = attendance_log\r\n\r\n                # Clearing and updating console display\r\n                if max_entry == 0:\r\n                    print(\"\\033[2E\", end=\"\")\r\n                    clear(9)\r\n                else:\r\n                    print(\"\\033[2E\", end=\"\")\r\n                    clear(9)\r\n\r\n                print(\"\\033[f\", end=\"\")\r\n                tab_title(\"CHECK ATTENDANCE\")\r\n                print(\"\\033[8E\", end=\"\")\r\n\r\n    # Searching again for next\r\n    if not today_next_schedule_found:\r\n        for index, (stud_no, course, day, time) in enumerate(schedule):\r\n            next_start_time, next_end_time = time.split(\" - \")\r\n\r\n            next_start_time = convert_to_24hrs(next_start_time)\r\n            time_now = convert_to_24hrs(current_time)\r\n\r\n            if next_start_time >= time_now:\r\n                schedule[index] = (stud_no, course, day, time)\r\n                next_schedule.append(schedule[index])\r\n                today_next_schedule_found = True\r\n                break\r\n\r\n    # Displaying attendance and next schedule if next schedule found\r\n    if today_next_schedule_found:\r\n        print(\"┌─────────────────────────────────────────────┐\".center(columns))\r\n        print(f\"│{\"SCHEDULE NOW\":^45}│\".center(columns))\r\n        print(\"├─────────────────────────────────────────────┤\".center(columns))\r\n        if _attendance:\r\n            for log in _attendance:\r\n                print(f\"│ Course Title : {log[1]:<29}│\".center(columns))\r\n                print(f\"│ Time         : {log[3]:<29}│\".center(columns))\r\n                print(f\"│ Status       : {log[6]:<29}│\".center(columns))\r\n                print(f\"│ Time In      : {log[5]:<29}│\".center(columns))\r\n        else:\r\n            print(f\"│{\"NO SCHEDULE\":^45}│\".center(columns))\r\n        print(\"└─────────────────────────────────────────────┘\\n\".center(columns))\r\n\r\n        print(\"┌─────────────────────────────────────────────┐\".center(columns))\r\n        print(f\"│{\"NEXT SCHEDULE\":^45}│\".center(columns))\r\n        print(\"├─────────────────────────────────────────────┤\".center(columns))\r\n        for x in next_schedule:\r\n            print(f\"│ Course Title : {x[1]:<29}│\".center(columns))\r\n            print(f\"│ Time         : {x[3]:<29}│\".center(columns))\r\n            print(\"└─────────────────────────────────────────────┘\".center(columns))\r\n    else:  # Else if there's no next schedule found. It will display all schedules within the day.\r\n        if not attendance_log:  # Checking for attendance_log if it has no value\r\n            print(\"┌───────────────────────────────────────────────────────────────────────┐\".center(columns))\r\n            print(f\"│{\"SCHEDULE TODAY\":^71}│\".center(columns))\r\n            print(\"├───────────────────┬───────────────────────┬────────────┬──────────────┤\".center(columns))\r\n            print((f\"│{\"COURSE TITLE\":^19}\".ljust(19) + f\"│{\"TIME\":^23}\".ljust(23) +\r\n                   f\"│{\"STATUS\":^12}\".ljust(12) + f\"│{\"TIME IN\":^14}\".ljust(14) + \"│\").center(columns))\r\n            if schedule:\r\n                print(\"├───────────────────┼───────────────────────┼────────────┼──────────────┤\"\r\n                      .center(columns))\r\n                for attn, (stud_no, course, day, time) in enumerate(schedule):\r\n                    # Searching for all attendance in attendance database\r\n                    cursor.execute(\"SELECT * FROM Attendance WHERE Student_No = ? AND _Course = ? \"\r\n                                   \"AND _Day = ? AND _Time = ? AND _Date = ?\",\r\n                                   (stud_no, course, day, time, current_date))\r\n                    _attendance = cursor.fetchall()  # Store all search schedule\r\n                    if _attendance:\r\n                        for log in _attendance:\r\n                            print((f\"│ {log[1]}\".ljust(20) + f\"│ {log[3]}\".ljust(24) +\r\n                                   f\"│{log[6]:^12}\".ljust(12) + f\"│{log[5]:^14}\".ljust(14) + \"│\").center(columns))\r\n                print(\"└───────────────────┴───────────────────────┴────────────┴──────────────┘\"\r\n                      .center(columns))\r\n            else:\r\n                print(\"├───────────────────┴───────────────────────┴────────────┴──────────────┤\".center(columns))\r\n                print(f\"│{\"No Schedule\":^71}│\".center(columns))\r\n                print(\"└───────────────────────────────────────────────────────────────────────┘\".center(columns))\r\n\r\n        next_day = (days.index(current_day) + 1) % len(days)\r\n        next_day = days[next_day]\r\n\r\n        # Searching for next day schedule in class schedule database\r\n        cursor.execute(\"SELECT * FROM Class_Schedule WHERE Student_No = ? AND _Day = ?\",\r\n                       (stud_no, next_day,))\r\n        next_day_sched = cursor.fetchall()  # Store all search schedule\r\n\r\n        # If it has next day schedule it will display all schedules.\r\n        print(\"┌─────────────────────────────────────────────┐\".center(columns))\r\n        print(f\"│{\"NEXT SCHEDULE \" + f\"[{next_day.upper()}]\":^45}│\".center(columns))\r\n        print(\"├─────────────────────────────────────────────┤\".center(columns))\r\n        if next_day_sched:\r\n            for idx, sched in enumerate(next_day_sched):\r\n                print(f\"│  Course Title : {sched[1]:<28}│\".center(columns))\r\n                print(f\"│  Time         : {sched[3]:<28}│\".center(columns))\r\n                if idx < len(next_day_sched) - 1:\r\n                    print(f\"│{\"-\" * 40:^45}│\".center(columns))\r\n        else:\r\n            print(f\"│{\"No Schedule\":^45}│\".center(columns))\r\n        print(\"└─────────────────────────────────────────────┘\".center(columns))\r\n\r\n    print(\"\\n\\n\")\r\n    print((\"-\" * 80).center(columns))\r\n    while True:\r\n        user = input_key(\"      Press [N] to check again or [Y] to exit: \")\r\n        match user.upper():\r\n            case \"N\":\r\n                clear(100)\r\n                check_attendance()\r\n                break\r\n            case \"Y\":\r\n                exit()\r\n            case _:\r\n                print(\"\\033[1F\", end=\"\")\r\n\r\n\r\n# Function for displaying all class schedule\r\ndef class_schedule(__schedule):\r\n    # Group schedules by day\r\n    day_schedules = {}\r\n    # Display the table header\r\n    print((\"╭\" + \"─\" * 111 + \"╮\").center(columns))\r\n    print(f\"│{\"CLASS SCHEDULE\":^111}│\".center(columns))\r\n    print(\r\n        f\"├{\"─\" * 15:^15}┬{\"─\" * 15:^15}┬{\"─\" * 15:^15}┬{\"─\" * 15:^15}┬{\"─\" * 15:^15}┬{\"─\" * 15:^15}┬{\"─\" * 15:^15}┤\"\r\n        .center(columns))\r\n    print(\r\n        f\"│{\"MONDAY\":^15}│{\"TUESDAY\":^15}│{\"WEDNESDAY\":^15}│{\"THURSDAY\":^15}│{\"FRIDAY\":^15}│{\"SATURDAY\":^15}│\"\r\n        f\"{\"SUNDAY\":^15}│\".center(columns))\r\n    print(\r\n        f\"├{\"─\" * 15:^15}┼{\"─\" * 15:^15}┼{\"─\" * 15:^15}┼{\"─\" * 15:^15}┼{\"─\" * 15:^15}┼{\"─\" * 15:^15}┼{\"─\" * 15:^15}┤\"\r\n        .center(columns))\r\n\r\n    if __schedule:\r\n        for entry in __schedule:\r\n            day = entry[2]\r\n            if day not in day_schedules:\r\n                day_schedules[day] = []\r\n            day_schedules[day].append((entry[1], entry[3]))\r\n\r\n        # Get the maximum number of schedules for any day\r\n        max_schedules = max(len(schedules) for schedules in day_schedules.values())\r\n\r\n        # Display the schedules\r\n        for i in range(max_schedules):\r\n            day_schedule = []\r\n            for day in days:\r\n                if day in day_schedules and len(day_schedules[day]) > i:\r\n                    course, time = day_schedules[day][i]\r\n                    start, end = time.split(\" - \")\r\n                    day_schedule.append((course, start, end))\r\n                else:\r\n                    day_schedule.append((\"\", \"\", \"\"))\r\n            print(f\"│{day_schedule[0][0]:^15}│{day_schedule[1][0]:^15}│{day_schedule[2][0]:^15}\"\r\n                  f\"│{day_schedule[3][0]:^15}│{day_schedule[4][0]:^15}│{day_schedule[5][0]:^15}\"\r\n                  f\"│{day_schedule[6][0]:^15}│\".center(columns))\r\n            print(f\"│{day_schedule[0][1]:^15}│{day_schedule[1][1]:^15}│{day_schedule[2][1]:^15}\"\r\n                  f\"│{day_schedule[3][1]:^15}│{day_schedule[4][1]:^15}│{day_schedule[5][1]:^15}\"\r\n                  f\"│{day_schedule[6][1]:^15}│\".center(columns))\r\n            print(f\"│{day_schedule[0][2]:^15}│{day_schedule[1][2]:^15}│{day_schedule[2][2]:^15}\"\r\n                  f\"│{day_schedule[3][2]:^15}│{day_schedule[4][2]:^15}│{day_schedule[5][2]:^15}\"\r\n                  f\"│{day_schedule[6][2]:^15}│\".center(columns))\r\n            if i < max_schedules - 1:\r\n                print(\r\n                    f\"│{\"-\" * 15:^15}│{\"-\" * 15:^15}│{\"-\" * 15:^15}│{\"-\" * 15:^15}│{\"-\" * 15:^15}│{\"-\" * 15:^15}│\"\r\n                    f\"{\"-\" * 15:^15}│\".center(columns))\r\n    else:\r\n        print(f\"│{\"\":^15}│{\"\":^15}│{\"\":^15}│{\"\":^15}│{\"\":^15}│{\"\":^15}│{\"\":^15}│\".center(columns))\r\n    print(\r\n        f\"╰{\"─\" * 15:^15}┴{\"─\" * 15:^15}┴{\"─\" * 15:^15}┴{\"─\" * 15:^15}┴{\"─\" * 15:^15}┴{\"─\" * 15:^15}┴{\"─\" * 15:^15}╯\"\r\n        .center(columns))\r\n\r\n\r\n# Function for validating the time format\r\ndef validate_time_format(time):\r\n    # Define the regex pattern to match the time format\r\n    pattern = r'^\\d{1,2}:\\d{2} [AP]M - \\d{1,2}:\\d{2} [AP]M$'\r\n\r\n    # Check if the input matches the pattern\r\n    if re.match(pattern, time):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Function for converting time from 12 hours to 24 hours\r\ndef convert_to_24hrs(time_str):\r\n    # Convert time string from 12-hour format to minutes\r\n    parts = time_str.split()\r\n    hour, minute, second = 0, 0, 0\r\n    try:  # If time has a second\r\n        hour, minute, second = map(int, parts[0].split(':'))\r\n    except ValueError:\r\n        hour, minute = map(int, parts[0].split(':'))\r\n\r\n    if parts[1].upper() == 'PM':  # PM Case\r\n        if hour != 12:\r\n            hour += 12\r\n    else:  # AM case\r\n        if hour == 12:\r\n            hour = 0\r\n    return hour * 3600 + minute * 60 + second\r\n\r\n\r\n# Function for checking conflicts in the class schedule\r\ndef check_conflict(schedules, day, time):\r\n    new_start, new_end = map(convert_to_24hrs, time.split(' - '))\r\n\r\n    for index, (stud_no, sched_course, sched_day, sched_time) in enumerate(schedules):\r\n        if sched_day != day:\r\n            continue\r\n\r\n        start, end = map(convert_to_24hrs, sched_time.split(' - '))\r\n        if start <= new_start < end:\r\n            return sched_course  # Conflict found\r\n        elif start < new_end <= end:\r\n            return sched_course  # Conflict found\r\n        elif new_start <= start and new_end >= end:\r\n            return sched_course  # Conflict found\r\n\r\n    return None  # No conflict found\r\n\r\n\r\n# Function for sorting schedule by day and starting time\r\ndef sort_schedule(schedule_item):\r\n    day_str, time_str = schedule_item[2], schedule_item[3]\r\n    day_num = str(days.index(day_str) + 1)\r\n    start_time = datetime.datetime.strptime(time_str.split(\" - \")[0], \"%I:%M %p\")\r\n    return day_num, start_time\r\n\r\n\r\n# Function for getting the largest total count of schedule\r\ndef max_schedule_day(__schedule):\r\n    max_count = 0\r\n    if __schedule:\r\n        day_counts = {}  # Dictionary to store counts of schedules for each day\r\n\r\n        for entry in __schedule:\r\n            day = entry[2]  # Get the day from the entry\r\n            if day in day_counts:\r\n                day_counts[day] += 1  # Increment the count for that day\r\n            else:\r\n                day_counts[day] = 1  # Initialize the count for that day\r\n\r\n        # Find the day with the maximum count of schedules\r\n        max_day = max(day_counts, key=day_counts.get)\r\n        max_count = day_counts[max_day]\r\n    return max_count\r\n\r\n\r\n# Function for adding new course and saving it in schedule\r\ndef add_course(stud_no, sched_day):\r\n    # Design for adding new course\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"╰\" + \"─\" * 40 + \"╯\").center(columns))\r\n    print(\"\\033[7F\", end=\"\")\r\n    print(f\"{\"\":<24}│ ► {sched_day}\")\r\n    print(\"\\033[2E\", end=\"\")\r\n    while True:  # Validate key_pressed\r\n        try:\r\n            total_course = int(input_key(f\"{\"\":<24}│     Total course MAX(6): \"))\r\n            if total_course <= 6:\r\n                print(\"\\033[3E\", end=\"\")\r\n                clear(4)\r\n                print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n                break\r\n            else:\r\n                print(\"\\r\", end=\"\")\r\n                print(\"\\033[1F\", end=\"\")\r\n        except ValueError:\r\n            print(\"\\r\", end=\"\")\r\n            print(\"\\033[1F\", end=\"\")\r\n\r\n    print(\"\\033[5F\")\r\n    print(f\"{\"\":<24}│ ► {sched_day} [{total_course}]\")\r\n\r\n    num = 0  # Num is for current total course in a day\r\n    while num < total_course:  # If num is less than the set total_course the loop will continue to execute\r\n        # Adding course and time design\r\n        print(f\"│{\"-\" * 36:^40}│\".center(columns))\r\n        print(f\"│{\"   Course Title :\":<40}│\".center(columns))\r\n        print(f\"│{\"   Time         :\":<40}│\".center(columns))\r\n        print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n        print((\"╰\" + \"─\" * 40 + \"╯\").center(columns))\r\n\r\n        print(\"\\033[4F\", end=\"\")\r\n        sched_course = str(limit_input(f\"{\"\":<24}│   Course Title : \", 19))\r\n        print(\"\\033[1E\", end=\"\")\r\n        while True:  # Checking for time format\r\n            print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n            print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n            print((\"╰\" + \"─\" * 40 + \"╯\").center(columns))\r\n            print(\"\\033[3F\", end=\"\")\r\n\r\n            sched_time = str(limit_input(f\"{\"\":<24}│   Time         : \", 19).upper())\r\n            if validate_time_format(sched_time):\r\n                start, end = map(convert_to_24hrs, sched_time.split(' - '))\r\n                if (end - start) > 0:\r\n                    break\r\n                else:\r\n                    print(\"\\033[3E\", end=\"\")\r\n                    msg = input_key(f\"{\"\":<24}MSG: Wrong time schedule. \")\r\n                    if msg:\r\n                        clear(4)\r\n            else:\r\n                print(\"\\033[3E\", end=\"\")\r\n                msg = input_key(f\"{\"\":<19}MSG: Invalid time format.\\n\"\r\n                                f\"{\"\":<19}     Please follow the format: 10:00 AM - 12:00 PM \")\r\n                if msg:\r\n                    clear(5)\r\n\r\n        # Checking for conflict schedule\r\n        conflict = check_conflict(schedule, sched_day, sched_time)\r\n        if conflict is None:\r\n            schedule.append((stud_no, sched_course, sched_day, sched_time))\r\n            num += 1\r\n            print(\"\\033[1E\", end=\"\")\r\n        else:\r\n            print(\"\\033[3E\", end=\"\")\r\n            msg = input_key(f\"{\"\":<24}MSG: conflict schedule with {conflict.upper()}. \")\r\n            if msg:\r\n                clear(6)\r\n\r\n    print(\"\\033[2E\", end=\"\")\r\n    clear((3 * num) + 3)\r\n\r\n\r\n# Function for updating course\r\ndef update_course(stud_no, sched_day, current_total_course, day_to_update):\r\n    global new_schedule\r\n    global current_str\r\n    num = 0\r\n\r\n    # Design for updating course\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n    print((\"╰\" + \"─\" * 40 + \"╯\").center(columns))\r\n\r\n    print(\"\\033[8F\", end=\"\")\r\n    print(f\"{\"\":<24}│ ► {sched_day} {[current_total_course]}\")\r\n    print(\"\\033[2E\", end=\"\")\r\n\r\n    # Request for the total course in a day\r\n    while True:\r\n        try:\r\n            total_course = int(input_key(f\"{\"\":<24}│     Total course MAX(6): \"))\r\n            if total_course <= 6:\r\n                print(\"\\033[3E\", end=\"\")\r\n                clear(4)\r\n                print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n                break\r\n            else:\r\n                print(\"\\r\", end=\"\")\r\n                print(\"\\033[1F\", end=\"\")\r\n        except ValueError:\r\n            print(\"\\r\", end=\"\")\r\n            print(\"\\033[1F\", end=\"\")\r\n\r\n    # Display the total course\r\n    print(\"\\033[5E\", end=\"\")\r\n    clear(9)\r\n    print(f\"│{f\"{\" ► \" + sched_day} {[total_course]}\":<40}│\".center(columns))\r\n\r\n    # Getting each schedule in day_to_update\r\n    for sched in day_to_update:\r\n        if num == total_course:  # Check if the total count of sched not exceed to total_course\r\n            break\r\n\r\n        # Design for course and time and display the current course\r\n        print(f\"│{\"-\" * 36:^40}│\".center(columns))\r\n        print(f\"│{f\"   Course Title : {sched[1]}\":<40}│\".center(columns))\r\n        print(f\"│{f\"   Time         : {sched[3]}\":<40}│\".center(columns))\r\n        print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n        print((\"╰\" + \"─\" * 40 + \"╯\").center(columns))\r\n\r\n        print(\"\\033[4F\", end=\"\")\r\n        current_str = sched[1]\r\n        sched_course = str(limit_input(f\"{\"\":<24}│   Course Title : \", 19))\r\n        print(\"\\033[1E\", end=\"\")\r\n        current_str = sched[3]\r\n        while True:\r\n            print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n            print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n            print((\"╰\" + \"─\" * 40 + \"╯\").center(columns))\r\n            print(\"\\033[3F\", end=\"\")\r\n\r\n            sched_time = str(limit_input(f\"{\"\":<24}│   Time         : \", 19).upper())\r\n            # Check the format of input time\r\n            if validate_time_format(sched_time):\r\n                start, end = map(convert_to_24hrs, sched_time.split(' - '))\r\n                if (end - start) > 0:\r\n                    break\r\n                else:\r\n                    print(\"\\033[3E\", end=\"\")\r\n                    msg = input_key(f\"{\"\":<24}MSG: Wrong time schedule. \")\r\n                    if msg:\r\n                        clear(4)\r\n            else:\r\n                print(\"\\033[3E\", end=\"\")\r\n                msg = input_key(f\"{\"\":<19}MSG: Invalid time format.\\n\"\r\n                                f\"{\"\":<19}     Please follow the format: 10:00 AM - 12:00 PM \")\r\n                if msg:\r\n                    clear(5)\r\n\r\n        # Checking for conflict schedule\r\n        conflict = check_conflict(new_schedule, sched_day, sched_time)\r\n        if conflict is None:\r\n            new_schedule.append((stud_no, sched_course, sched_day, sched_time))\r\n            num += 1\r\n            print(\"\\033[1E\", end=\"\")\r\n            pass\r\n        else:\r\n            print(\"\\033[3E\", end=\"\")\r\n            msg = input_key(f\"{\"\":<24}MSG: conflict schedule with {conflict.upper()}. \")\r\n            if msg:\r\n                clear(6)\r\n\r\n    current_str = \"\"\r\n    while num < total_course:  # If day_to_update less than to the total course\r\n        # Design for course and time\r\n        print(f\"│{\"-\" * 36:^40}│\".center(columns))\r\n        print(f\"│{\"   Course Title :\":<40}│\".center(columns))\r\n        print(f\"│{\"   Time         :\":<40}│\".center(columns))\r\n        print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n        print((\"╰\" + \"─\" * 40 + \"╯\").center(columns))\r\n\r\n        print(\"\\033[4F\", end=\"\")\r\n        sched_course = str(limit_input(f\"{\"\":<24}│   Course Title : \", 19))\r\n        print(\"\\033[1E\", end=\"\")\r\n        while True:\r\n            print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n            print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n            print((\"╰\" + \"─\" * 40 + \"╯\").center(columns))\r\n            print(\"\\033[3F\", end=\"\")\r\n\r\n            sched_time = str(limit_input(f\"{\"\":<24}│   Time         : \", 19).upper())\r\n            # Check the format of input time\r\n            if validate_time_format(sched_time):\r\n                start, end = map(convert_to_24hrs, sched_time.split(' - '))\r\n                if (end - start) > 0:\r\n                    break\r\n                else:\r\n                    print(\"\\033[3E\", end=\"\")\r\n                    msg = input_key(f\"{\"\":<24}MSG: Wrong time schedule. \")\r\n                    if msg:\r\n                        clear(4)\r\n            else:\r\n                print(\"\\033[3E\", end=\"\")\r\n                msg = input_key(f\"{\"\":<19}MSG: Invalid time format.\\n\"\r\n                                f\"{\"\":<19}     Please follow the format: 10:00 AM - 12:00 PM \")\r\n                if msg:\r\n                    clear(5)\r\n\r\n        # Checking for conflict schedule\r\n        conflict = check_conflict(schedule, sched_day, sched_time)\r\n        if conflict is None:\r\n            new_schedule.append((stud_no, sched_course, sched_day, sched_time))\r\n            num += 1\r\n            print(\"\\033[1E\", end=\"\")\r\n        else:\r\n            print(\"\\033[3E\", end=\"\")\r\n            msg = input_key(f\"{\"\":<24}MSG: conflict schedule with {conflict.upper()}. \")\r\n            if msg:\r\n                clear(6)\r\n\r\n    # Clearing display for each day after updating\r\n    print(\"\\033[2E\", end=\"\")\r\n    clear((3 * num) + 3)\r\n\r\n\r\n# Function for registration of new students\r\ndef register_new_student():\r\n    global registering_new_student\r\n    global student_details\r\n    global days_of_week\r\n    global schedule\r\n    global data\r\n    global columns\r\n\r\n    tab_title(\"REGISTER NEW STUDENT\")\r\n    if not registering_new_student:\r\n        # Registration design\r\n        print((\"╭\" + \"─\" * 84 + \"╮\").center(columns))\r\n        print(f\"│{\"STUDENT DETAILS:\":^84}│\".center(columns))\r\n        print((\"├\" + \"─\" * 84 + \"┤\").center(columns))\r\n        print((\"│\" + \" \" * 84 + \"│\").center(columns))\r\n        print(f\"│  {\"Student No.: \":<82}│\".center(columns))\r\n        print(f\"│  {\"Name       : \":<82}│\".center(columns))\r\n        print(f\"│  {\"Department : \":<82}│\".center(columns))\r\n        print(f\"│  {\"Degree     : \":<82}│\".center(columns))\r\n        print(f\"│  {\"Year Level : \":<82}│\".center(columns))\r\n        print(f\"│  {\"Signature  : \":<82}│\".center(columns))\r\n        print((\"│\" + \" \" * 84 + \"│\").center(columns))\r\n        print((\"╰\" + \"─\" * 84 + \"╯\").center(columns))\r\n\r\n        print(\"\\033[8F\", end=\"\")\r\n        # Request the user to input the student number first\r\n        stud_no = str(limit_input(f\"  │  Student No.: \", 8))\r\n\r\n        # Searching for the student if already exist or registered in database\r\n        cursor.execute(f\"SELECT Student_No FROM Student_Info WHERE Student_No = ?\", (stud_no,))\r\n        data = cursor.fetchone()\r\n\r\n        if data:  # If the student already exist, registration will stop\r\n            print(\"\\033[8E\", end=\"\")\r\n            clear(100)\r\n            print(\"\\033[23E\", end=\"\")\r\n            print(\"MSG: Student already registered.\".center(columns))\r\n            print(\"\\033[f\", end=\"\")\r\n            check_attendance()\r\n\r\n        # User input\r\n        print(\"\\033[1E\", end=\"\")\r\n        stud_name = str(limit_input(f\"  │  Name       : \", 67).upper())\r\n        print(\"\\033[1E\", end=\"\")\r\n        stud_department = str(limit_input(f\"  │  Department : \", 67).title())\r\n        print(\"\\033[1E\", end=\"\")\r\n        stud_degree = str(limit_input(f\"  │  Degree     : \", 67).title())\r\n        print(\"\\033[1E\", end=\"\")\r\n        stud_level = str(limit_input(f\"  │  Year Level : \", 67))\r\n        print(\"\\033[1E\", end=\"\")\r\n        stud_signature = str(limit_input(f\"  │  Signature  : \", 25))\r\n\r\n        # Storing the student details as array list\r\n        student_details = [stud_no, stud_name, stud_department, stud_degree, stud_level, stud_signature]\r\n\r\n        # Display option\r\n        print(\"\\033[3E\", end=\"\")\r\n        print((\"╭\" + \"─\" * 40 + \"╮\").center(columns))\r\n        print(f\"│{\"CLASS SCHEDULE:\":^40}│\".center(columns))\r\n        print((\"├\" + \"─\" * 40 + \"┤\").center(columns))\r\n        print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n        print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n        print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n        print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n        print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n        print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n        print((\"╰\" + \"─\" * 40 + \"╯\").center(columns))\r\n\r\n        # Allow user to choose weekdays only or include weekends\r\n        print(\"\\033[7F\", end=\"\")\r\n        print(f\"{\"\":<24}│  Option:\")\r\n        print(f\"{\"\":<24}│     [1] Weekdays only\")\r\n        print(f\"{\"\":<24}│     [2] Include weekends\\n\\n\")\r\n\r\n        while True:  # Validate key_pressed\r\n            key_pressed1 = input_key(f\"{\"\":<24}│  Select: \")\r\n            match key_pressed1:\r\n                case \"0\":\r\n                    clear(100)\r\n                    student(\"Check Attendance\")\r\n                case \"1\":\r\n                    clear(8)\r\n                    days_of_week = \"Weekdays only\"\r\n                    print(f\"│{f\"CLASS SCHEDULE [{days_of_week}]\":^40}│\".center(columns))\r\n                case \"2\":\r\n                    clear(8)\r\n                    days_of_week = \"Include weekends\"\r\n                    print(f\"│{f\"CLASS SCHEDULE [{days_of_week}]\":^40}│\".center(columns))\r\n                case _:\r\n                    print(\"\\033[1F\", end=\"\")\r\n                    print(\"\\r\", end=\"\")\r\n                    continue\r\n            break\r\n\r\n        print((\"├\" + \"─\" * 40 + \"┤\").center(columns), end=\"\")\r\n        print(\"\\033[1E\", end=\"\")\r\n\r\n        # Adding courses\r\n        while True:\r\n            if days_of_week == \"Weekdays only\":\r\n                for day in days[:5]:\r\n                    add_course(stud_no, day)\r\n                break\r\n            if days_of_week == \"Include weekends\":\r\n                for day in days:\r\n                    add_course(stud_no, day)\r\n                break\r\n\r\n    # Sorting the schedule\r\n    schedule = sorted(schedule, key=sort_schedule)\r\n\r\n    max_count = max_schedule_day(schedule)  # Calculating the total course list and save the largest count\r\n\r\n    # Resizing console if the total max_count is 6\r\n    if max_count == 6:\r\n        os.system(f\"mode con cols={120} lines={53}\")\r\n    else:\r\n        os.system(f\"mode con cols={120} lines={45}\")\r\n\r\n    center_console_window()  # Center console\r\n    columns = os.get_terminal_size().columns   # Save the size width\r\n    clear(100)  # Clear display\r\n    tab_title(\"REGISTER NEW STUDENT\")\r\n\r\n    # Display student details\r\n    _details(student_details)\r\n\r\n    # Display class schedule\r\n    class_schedule(schedule)\r\n\r\n    # Check if no schedule and display a note\r\n    if not schedule:\r\n        print(f\"{\"\":5}NOTE: We see that there's no schedule.\")\r\n\r\n    # Allow user to choose what next to execute\r\n    print(\"\\n\")\r\n    print((\"-\" * int(columns - 4)).center(columns))\r\n    print(f\"[S] Update Schedule{\"\":<26}[D] Update Student Details\\n\".center(columns))\r\n    while True:  # Validating key pressed\r\n        key_pressed = input_key(f\"{\"\":<5}Are you sure you want to save? Press [Y] to save. \")\r\n        match key_pressed.upper():\r\n            case \"S\":\r\n                clear(100)\r\n                os.system(f\"mode con cols={90} lines={45}\")\r\n                columns = os.get_terminal_size().columns\r\n                center_console_window()\r\n                registering_new_student = True\r\n                update_schedule()\r\n                clear(100)\r\n                register_new_student()\r\n            case \"D\":\r\n                clear(100)\r\n                os.system(f\"mode con cols={90} lines={45}\")\r\n                columns = os.get_terminal_size().columns\r\n                center_console_window()\r\n                registering_new_student = True\r\n                update_student_details()\r\n                if data:\r\n                    print(\"\\033[8E\", end=\"\")\r\n                    clear(100)\r\n                    print(\"\\033[23E\", end=\"\")\r\n                    print(\"MSG: Student already registered.\".center(columns))\r\n                    print(\"\\033[f\", end=\"\")\r\n                    check_attendance()\r\n                clear(100)\r\n                register_new_student()\r\n            case \"Y\":\r\n                add_student(student_details)\r\n                add_schedule(schedule)\r\n                connection.commit()  # Saving registration\r\n                break\r\n            case _:\r\n                clear(1)\r\n\r\n    # Restore console size and clear display\r\n    os.system(f\"mode con cols={90} lines={45}\")\r\n    center_console_window()\r\n    columns = os.get_terminal_size().columns\r\n    clear(100)\r\n\r\n    # Show successful message\r\n    print(\"\\033[23E\", end=\"\")\r\n    print(\"MSG: Student successfully registered\".center(columns))\r\n    print(\"\\033[f\", end=\"\")\r\n\r\n    # Clear variable and return to check attendance\r\n    student_details.clear()\r\n    schedule.clear()\r\n    check_attendance()\r\n\r\n\r\n# Function for updating student details\r\ndef update_student_details():\r\n    global student_details\r\n    global data\r\n    global columns\r\n    global current_str\r\n    global in_update_student_details\r\n    global updating_student_details\r\n\r\n    if not updating_student_details and not in_register_new_student:  # Check if user not updating student details\r\n        student_details.clear()\r\n        tab_title(\"UPDATE STUDENT DETAILS\")\r\n        student(\"Update Student Details\")\r\n        tab_title(\"UPDATE STUDENT DETAILS\")\r\n\r\n        _details(student_details)\r\n\r\n        # Allow the user to choose what to execute next.\r\n        print(\"\\n\", end=\"\")\r\n        print((\"-\" * int(columns - 4)).center(columns))\r\n        print(f\"[Y] Yes{\"\":<26}[N] No\\n\".center(columns))\r\n        while True:  # Validate key pressed\r\n            key_pressed = input_key(f\"{\"\":<5}Are you sure you want to update it? \")\r\n            match key_pressed.upper():\r\n                case \"N\":\r\n                    clear(100)\r\n                    in_update_student_details = False\r\n                    check_attendance()\r\n                case \"Y\":\r\n                    clear(100)\r\n                    updating_student_details = True\r\n                    update_student_details()\r\n                case _:\r\n                    clear(1)\r\n\r\n    # Checking if not in_register_new_student\r\n    if not in_register_new_student:\r\n        tab_title(\"UPDATE STUDENT DETAILS\")\r\n    else:\r\n        tab_title(\"REGISTER NEW STUDENT\")\r\n\r\n    # Assign each variable\r\n    stud_no = student_details[0]\r\n    stud_name = student_details[1]\r\n    stud_department = student_details[2]\r\n    stud_degree = student_details[3]\r\n    stud_level = student_details[4]\r\n    stud_signature = student_details[5]\r\n\r\n    _details(student_details)  # Display student details\r\n\r\n    # Checking if in_register_new_student\r\n    if in_register_new_student:\r\n        current_str = stud_no\r\n        print(\"\\033[8F\", end=\"\")\r\n        stud_no = str(limit_input(f\"  │  Student No.: \", 67).upper())\r\n        print(\"\\033[1E\", end=\"\")\r\n\r\n        # Searching for the student if already exist or registered in database\r\n        cursor.execute(f\"SELECT Student_No FROM Student_Info WHERE Student_No = ?\", (stud_no,))\r\n        data = cursor.fetchone()\r\n\r\n        if data:\r\n            current_str = \"\"\r\n            return\r\n    else:\r\n        print(\"\\033[7F\", end=\"\")\r\n\r\n    current_str = stud_name\r\n    stud_name = str(limit_input(f\"  │  Name       : \", 67).upper())\r\n    print(\"\\033[1E\", end=\"\")\r\n    current_str = stud_department\r\n    stud_department = str(limit_input(f\"  │  Department : \", 67).title())\r\n    print(\"\\033[1E\", end=\"\")\r\n    current_str = stud_degree\r\n    stud_degree = str(limit_input(f\"  │  Degree     : \", 67).title())\r\n    print(\"\\033[1E\", end=\"\")\r\n    current_str = stud_level\r\n    stud_level = str(limit_input(f\"  │  Year Level : \", 67))\r\n    print(\"\\033[1E\", end=\"\")\r\n    current_str = stud_signature\r\n    stud_signature = str(limit_input(f\"  │  Signature  : \", 25))\r\n    current_str = \"\"\r\n\r\n    # Checking if in_register_new_student\r\n    if in_register_new_student:\r\n        student_details = [stud_no, stud_name, stud_department, stud_degree, stud_level, stud_signature]\r\n        return\r\n\r\n    # Checking for changes\r\n    changes = False\r\n    if stud_name != student_details[1]:\r\n        changes = True\r\n    elif stud_department != student_details[2]:\r\n        changes = True\r\n    elif stud_degree != student_details[3]:\r\n        changes = True\r\n    elif stud_level != student_details[4]:\r\n        changes = True\r\n    elif stud_signature != student_details[5]:\r\n        changes = True\r\n\r\n    # Show message if no changes\r\n    print(\"\\033[3E\", end=\"\")\r\n    if not changes:\r\n        print(f\"{\"\":<5}NOTE: No changes have been made.\")\r\n\r\n    # Allow the user to choose what to execute next.\r\n    print(\"\\n\", end=\"\")\r\n    print((\"-\" * 86).center(90))\r\n    print(f\"[S] Save & Update Class Schedule{\"\":<20}[N] Update Again\\n\".center(columns))\r\n    while True:  # Validate key pressed\r\n        key_pressed = input_key(f\"{\"\":<5}Are you sure you want to save? Press [Y] to save. \")\r\n        match key_pressed.upper():\r\n            case \"Y\":\r\n                student_details = [stud_no, stud_name, stud_department, stud_degree, stud_level, stud_signature]\r\n                update_student(student_details)\r\n                connection.commit()  # Save modified student details\r\n                clear(100)\r\n                print(\"\\033[23E\", end=\"\")\r\n                print(\"MSG: Student details were successfully updated.\".center(columns))\r\n                print(\"\\033[f\", end=\"\")\r\n                in_update_student_details = False\r\n                updating_student_details = False\r\n                check_attendance()\r\n            case \"N\":\r\n                clear(100)\r\n                update_student_details()\r\n            case \"S\":\r\n                student_details = [stud_no, stud_name, stud_department, stud_degree, stud_level, stud_signature]\r\n                update_student(student_details)\r\n                update_schedule()\r\n            case _:\r\n                clear(1)\r\n\r\n\r\n# Function for updating schedule\r\ndef update_schedule():\r\n    global columns\r\n    global schedule\r\n    global in_update_student_details\r\n    global updating_student_details\r\n    global updating_class_schedule\r\n    new_schedule.clear()\r\n\r\n    if not updating_class_schedule and not registering_new_student:  # User not already in updating class schedule\r\n        schedule.clear()\r\n\r\n        if not updating_student_details:  # Check if user not in update student details\r\n            schedule.clear()\r\n            tab_title(\"UPDATE SCHEDULE\")\r\n            student(\"Update Schedule\")\r\n\r\n        # Searching for the schedule of the student\r\n        cursor.execute(\"SELECT * FROM Class_Schedule WHERE Student_No = ?\", (student_details[0],))\r\n        schedule.extend(cursor.fetchall())  # Store it as array list\r\n\r\n        # Getting the largest total count of schedule\r\n        max_sched = max_schedule_day(schedule)\r\n        if max_sched == 6:  # If the total count is equal to 6 it will resize the console height\r\n            os.system(f\"mode con cols={120} lines={53}\")\r\n        else:  # Else the console will resize the width only\r\n            os.system(f\"mode con cols={120} lines={45}\")\r\n\r\n        center_console_window()  # Center the console\r\n        columns = os.get_terminal_size().columns  # Saving the size of console width\r\n\r\n        # Checking if user not in notifying student details\r\n        if updating_student_details:\r\n            tab_title(\"UPDATE STUDENT DETAILS\")\r\n        else:\r\n            tab_title(\"UPDATE SCHEDULE\")\r\n\r\n        # Display the student details\r\n        _details(student_details)\r\n\r\n        # Display all class schedule\r\n        class_schedule(schedule)\r\n\r\n        # Allow user to choose if they want to update the schedule\r\n        print(\"\\n\", end=\"\")\r\n        print((\"-\" * int(columns - 4)).center(columns))\r\n        print(f\"[Y] Yes{\"\":<26}[N] No\\n\".center(columns))\r\n        while True:\r\n            key_pressed = input_key(f\"{\"\":<5}Are you sure you want to update it? \")\r\n            match key_pressed.upper():\r\n                case \"N\":  # It will return to check attendance\r\n                    clear(100)\r\n                    os.system(f\"mode con cols={90} lines={45}\")\r\n                    columns = os.get_terminal_size().columns\r\n                    center_console_window()\r\n                    check_attendance()\r\n                case \"Y\":  # It will continue to update the class schedule\r\n                    os.system(f\"mode con cols={90} lines={45}\")\r\n                    columns = os.get_terminal_size().columns\r\n                    center_console_window()\r\n                    updating_class_schedule = True\r\n                    update_schedule()  # Return to update schedule\r\n                case _:\r\n                    clear(1)\r\n\r\n    if updating_student_details:  # If user updating student details\r\n        tab_title(\"UPDATE STUDENT DETAILS\")\r\n    elif registering_new_student:  # If user register new student\r\n        tab_title(\"REGISTER NEW STUDENT\")\r\n    else:  # If user updating class schedule\r\n        tab_title(\"UPDATE SCHEDULE\")\r\n\r\n    # Display the student details\r\n    _details(student_details)\r\n\r\n    _days = []\r\n    print((\"╭\" + \"─\" * 40 + \"╮\").center(columns))\r\n    print(f\"│{\"CLASS SCHEDULE:\":^40}│\".center(columns))\r\n    print((\"├\" + \"─\" * 40 + \"┤\").center(columns))\r\n    if not registering_new_student:\r\n        # Allow user to select what those days are to be modified\r\n        print(f\"│{\"  Select a day you want to update.\":<40}│\".center(columns))\r\n        print(f\"│{\"     \" + f\"{\"[1] Monday\":<20}[5] Friday\":<40}│\".center(columns))\r\n        print(f\"│{\"     \" + f\"{\"[2] Tuesday\":<20}[6] Saturday\":<40}│\".center(columns))\r\n        print(f\"│{\"     \" + f\"{\"[3] Wednesday\":<20}[7] Sunday\":<40}│\".center(columns))\r\n        print(f\"│{\"     [4] Thursday\":<40}│\".center(columns))\r\n        print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n        print((\"│\" + \" \" * 40 + \"│\").center(columns))\r\n        print((\"╰\" + \"─\" * 40 + \"╯\").center(columns))\r\n\r\n        print(\"\\033[2F\", end=\"\")\r\n        key_pressed = int_input(f\"{\"\":<24}│  Select: \", 7)\r\n\r\n        # Converting the selected numbers as days and storing it as array\r\n        for day in key_pressed:\r\n            _days.append(days[int(day) - 1])\r\n\r\n        # Sorting the days\r\n        _days.sort(key=lambda x: days.index(x))\r\n\r\n        print(\"\\033[6F\", end=\"\")  # Move cursor up\r\n    else:\r\n        if days_of_week == \"Weekdays only\":\r\n            _days = days[:5]\r\n        if days_of_week == \"Include weekends\":\r\n            _days = days\r\n\r\n    # updating now each class schedule\r\n    for _day in _days:\r\n        _total = 0\r\n        _to_update = []\r\n        for sched in schedule:\r\n            if sched[2] == _day:\r\n                _total += 1\r\n                _to_update.append(sched)\r\n        # Calling for function to for updating each course\r\n        update_course(student_details[0], _day, _total, _to_update)\r\n\r\n    # Getting for the other not modified schedule\r\n    for sched in schedule:\r\n        if sched[2] not in _days:\r\n            new_schedule.append(sched)\r\n\r\n    # Sorting the schedule\r\n    schedule = sorted(new_schedule, key=sort_schedule)\r\n\r\n    # If registering_new_student it will return to registration\r\n    if registering_new_student:\r\n        return\r\n\r\n    # Getting the largest total count of schedule\r\n    max_sched = max_schedule_day(schedule)\r\n    if max_sched == 6:  # If the total count is equal to 6 it will resize the console height\r\n        os.system(f\"mode con cols={120} lines={53}\")\r\n    else:  # Else the console will resize the width only\r\n        os.system(f\"mode con cols={120} lines={45}\")\r\n\r\n    center_console_window()  # Center the console\r\n    columns = os.get_terminal_size().columns  # Save the size of console width\r\n\r\n    # Checking again if not in update student details\r\n    if updating_student_details:\r\n        tab_title(\"UPDATE STUDENT DETAILS\")\r\n    else:\r\n        tab_title(\"UPDATE SCHEDULE\")\r\n\r\n    # Display student details\r\n    _details(student_details)\r\n\r\n    # Display the new class schedule\r\n    class_schedule(schedule)\r\n\r\n    # Checking now if no schedule has been modified\r\n    changes = False\r\n    for sched in schedule:\r\n        if sched not in schedule:\r\n            changes = True\r\n            break\r\n\r\n    # If no schedule has been modified it will show note\r\n    if not changes:\r\n        print(f\"{\"\":<5}NOTE: No changes have been made.\")\r\n\r\n    # Allow user to choose if they want to update again or just save it\r\n    print(\"\\n\", end=\"\")\r\n    print((\"-\" * int(columns - 4)).center(columns))\r\n    print(f\"[Y] Save{\"\":<26}[N] Update Again\\n\".center(columns))\r\n    while True:\r\n        key_pressed = input_key(f\"{\"\":<5}Are you sure you want to save? \")\r\n        match key_pressed.upper():\r\n            case \"N\":\r\n                clear(100)\r\n                os.system(f\"mode con cols={90} lines={45}\")\r\n                columns = os.get_terminal_size().columns\r\n                center_console_window()\r\n                update_schedule()\r\n            case \"Y\":\r\n                cursor.execute(\"DELETE FROM Class_Schedule WHERE Student_No = ?\", (student_details[0],))\r\n                add_schedule(schedule)\r\n                connection.commit()\r\n                clear(100)\r\n                os.system(f\"mode con cols={90} lines={45}\")\r\n                columns = os.get_terminal_size().columns\r\n                center_console_window()\r\n                print(\"\\033[23E\", end=\"\")\r\n                # Display message after updating\r\n                if updating_student_details and updating_class_schedule:\r\n                    print(\"MSG: Student details and the class schedule were successfully updated.\".center(columns))\r\n                    updating_student_details = False\r\n                    updating_class_schedule = False\r\n                elif updating_class_schedule:\r\n                    print(\"MSG: Class schedule successfully updated.\".center(columns))\r\n                    updating_class_schedule = False\r\n                print(\"\\033[f\", end=\"\")\r\n                in_update_student_details = False\r\n                check_attendance()\r\n            case _:\r\n                clear(1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    run_as_administrator()\r\n    set_console_title(\"Student Attendance Management System\")\r\n    set_window_style()\r\n    set_console_size(90, 45)\r\n    columns = os.get_terminal_size().columns\r\n    center_console_window()\r\n    check_attendance()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Student_Attendance.py b/Student_Attendance.py
--- a/Student_Attendance.py	(revision 0171d9d0cbfef83a0b1acc63acea41e2e3dd87d4)
+++ b/Student_Attendance.py	(date 1713087267958)
@@ -12,7 +12,6 @@
 import sys
 import re
 
-
 # Initialize variable
 student_details = []
 days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
